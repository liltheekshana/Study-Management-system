import java.util.Scanner;

class StudySessionNode {
    String topic;
    StudySessionNode next;

    public StudySessionNode(String topic) {
        this.topic = topic;
        this.next = null;
    }
}

class StudySessionQueue {
    private StudySessionNode head; // Points to the first session (head of the queue)
    private StudySessionNode tail; // Points to the last session (tail of the queue)

    public StudySessionQueue() {
        this.head = null;
        this.tail = null;
    }

    // Enqueue: Add a new session at the end of the queue
    public void enqueue(String topic) {
        StudySessionNode newNode = new StudySessionNode(topic);
        if (tail == null) { // If the queue is empty
            head = tail = newNode;
        } else {
            tail.next = newNode;
            tail = newNode;
        }
    }

    // Dequeue: Remove the session from the front of the queue
    public String dequeue() {
        if (head == null) {
            return "The queue is empty, no session to dequeue.";
        }
        String removedTopic = head.topic;
        head = head.next;
        if (head == null) { // If the queue becomes empty
            tail = null;
        }
        return "Dequeued: " + removedTopic;
    }

    // Peek: Get the topic of the session at the front of the queue without removing it
    public String peek() {
        if (head == null) {
            return "The queue is empty, no session to peek.";
        }
        return "Next session: " + head.topic;
    }

    // Display: Print all sessions in the queue
    public void display() {
        if (head == null) {
            System.out.println("The queue is empty.");
            return;
        }
        StudySessionNode current = head;
        while (current != null) {
            System.out.println(current.topic);
            current = current.next;
        }
    }

    public static void main(String[] args) {
        StudySessionQueue queue = new StudySessionQueue();
        Scanner scanner = new Scanner(System.in);
        int choice;

        do {
            System.out.println("\nStudy Session Queue Menu:");
            System.out.println("1. Add Study Session");
            System.out.println("2. Delete Study Session");
            System.out.println("3. Next Study Session");
            System.out.println("4. Display Study Sessions");
            System.out.println("5. Exit");
            System.out.print("Enter your choice: ");

            while (!scanner.hasNextInt()) {
                System.out.println("Invalid input. Please enter a number.");
                scanner.next(); // Consume the invalid input
            }
            choice = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            switch (choice) {
                case 1:
                    System.out.println("Enter the topic of the study session:");
                    String topic = scanner.nextLine().trim();
                    queue.enqueue(topic);
                    System.out.println("Added: " + topic);
                    break;
                case 2:
                    System.out.println(queue.dequeue());
                    break;
                case 3:
                    System.out.println(queue.peek());
                    break;
                case 4:
                    System.out.println("All study sessions in the queue:");
                    queue.display();
                    break;
                case 5:
                    System.out.println("Exiting...");
                    break;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        } while (choice != 5);

        scanner.close();
    }
}
